(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports={ "height":128,
 "layers":[
        {
         "data":[58, 74, 4, 58, 2, 2, 58, 5, 6, 5, 5, 1, 2, 3, 74, 3, 5, 3, 58, 2, 1, 5, 1, 74, 5, 1, 74, 4, 74, 58, 3, 6, 74, 58, 6, 5, 3, 74, 6, 4, 1, 74, 6, 5, 4, 5, 6, 74, 3, 74, 6, 5, 58, 1, 6, 5, 6, 1, 6, 6, 1, 6, 58, 2, 2, 4, 1, 74, 2, 6, 3, 2, 1, 1, 2, 1, 1, 58, 4, 58, 74, 6, 1, 2, 6, 58, 3, 2, 5, 1, 74, 1, 3, 6, 1, 5, 5, 4, 6, 5, 74, 2, 3, 4, 74, 6, 74, 58, 4, 1, 6, 4, 5, 2, 4, 4, 3, 3, 4, 58, 6, 2, 4, 4, 5, 74, 4, 5, 4, 5, 74, 2, 74, 6, 1, 6, 1, 6, 4, 5, 58, 58, 1, 1, 4, 58, 58, 74, 6, 58, 58, 3, 58, 58, 1, 2, 5, 58, 5, 4, 74, 5, 1, 5, 4, 1, 5, 2, 3, 1, 58, 74, 4, 6, 1, 6, 58, 74, 1, 5, 6, 6, 58, 4, 58, 1, 5, 5, 2, 74, 1, 5, 3, 1, 1, 3, 1, 5, 74, 4, 3, 6, 58, 74, 1, 6, 6, 5, 4, 3, 6, 5, 2, 58, 5, 58, 4, 1, 5, 2, 3, 74, 4, 74, 58, 2, 3, 5, 3, 58, 6, 2, 6, 5, 4, 4, 1, 6, 6, 4, 3, 74, 3, 2, 6, 3, 5, 5, 74, 1, 2, 58, 3, 74, 3, 6, 58, 2, 4, 3, 6, 2, 74, 5, 1, 1, 5, 2, 1, 6, 2, 2, 5, 2, 74, 4, 6, 5, 6, 1, 4, 6, 5, 1, 6, 6, 5, 3, 1, 58, 4, 5, 4, 58, 2, 74, 6, 74, 2, 58, 6, 74, 3, 3, 4, 1, 74, 3, 74, 2, 6, 58, 2, 3, 6, 74, 3, 5, 1, 4, 3, 6, 4, 3, 4, 5, 1, 3, 58, 1, 3, 3, 3, 58, 3, 2, 74, 1, 74, 1, 58, 6, 2, 58, 58, 58, 2, 4, 74, 3, 58, 1, 3, 2, 74, 3, 74, 4, 4, 5, 4, 58, 3, 4, 74, 5, 6, 2, 5, 4, 5, 5, 74, 5, 74, 6, 4, 74, 58, 5, 74, 5, 1, 2, 58, 5, 58, 58, 4, 58, 1, 3, 5, 58, 3, 1, 2, 6, 6, 2, 4, 3, 1, 6, 2, 58, 4, 3, 5, 1, 74, 4, 4, 1, 4, 6, 58, 1, 4, 6, 5, 74, 5, 1, 2, 74, 74, 74, 6, 1, 6, 4, 1, 3, 58, 5, 2, 5, 3, 3, 2, 74, 1, 5, 1, 4, 3, 4, 5, 3, 3, 3, 74, 74, 1, 74, 3, 58, 3, 3, 5, 74, 74, 3, 58, 2, 74, 1, 1, 5, 5, 4, 2, 3, 5, 6, 3, 2, 1, 5, 58, 58, 1, 4, 58, 2, 3, 1, 5, 4, 6, 2, 58, 4, 1, 5, 6, 4, 6, 3, 2, 2, 3, 3, 3, 58, 1, 58, 74, 4, 1, 6, 2, 58, 6, 74, 1, 4, 2, 58, 6, 74, 74, 2, 58, 3, 58, 58, 6, 5, 58, 74, 1, 6, 1, 4, 2, 58, 3, 3, 1, 58, 58, 6, 5, 58, 74, 6, 3, 6, 58, 58, 6, 3, 58, 2, 5, 6, 58, 74, 74, 74, 74, 58, 58, 74, 74, 2, 3, 6, 2, 6, 4, 3, 3, 5, 6, 1, 3, 4, 4, 2, 58, 1, 1, 5, 6, 4, 5, 1, 1, 3, 58, 6, 6, 58, 1, 4, 6, 74, 2, 2, 1, 58, 2, 2, 74, 2, 2, 74, 4, 6, 1, 4, 1, 2, 58, 1, 2, 2, 3, 58, 5, 58, 58, 5, 3, 1, 2, 5, 4, 1, 3, 6, 74, 5, 4, 58, 74, 6, 6, 5, 6, 58, 3, 74, 2, 6, 74, 5, 1, 2, 3, 2, 3, 3, 6, 1, 74, 1, 58, 74, 74, 4, 74, 1, 3, 4, 74, 3, 2, 1, 74, 58, 5, 3, 4, 2, 74, 6, 58, 58, 5, 5, 2, 4, 6, 2, 3, 2, 1, 3, 2, 74, 58, 2, 1, 74, 1, 5, 58, 1, 5, 5, 5, 2, 2, 4, 4, 2, 74, 58, 2, 2, 1, 74, 74, 4, 5, 5, 5, 58, 5, 74, 2, 4, 74, 74, 5, 2, 58, 6, 1, 1, 74, 74, 5, 6, 4, 58, 5, 58, 2, 74, 3, 1, 2, 4, 74, 2, 5, 4, 2, 3, 1, 74, 3, 4, 74, 1, 1, 6, 74, 5, 6, 58, 3, 5, 58, 3, 4, 74, 58, 5, 4, 58, 74, 3, 1, 6, 3, 5, 4, 5, 74, 3, 5, 4, 58, 5, 4, 2, 74, 2, 74, 1, 2, 3, 3, 58, 58, 58, 4, 74, 1, 2, 74, 58, 2, 6, 58, 1, 1, 2, 1, 1, 58, 58, 5, 5, 3, 4, 3, 5, 6, 1, 4, 2, 58, 58, 58, 3, 2, 1, 5, 2, 3, 5, 2, 6, 5, 3, 2, 74, 58, 3, 74, 1, 2, 58, 2, 1, 5, 4, 1, 58, 2, 5, 4, 4, 6, 74, 4, 58, 6, 5, 2, 74, 5, 6, 1, 2, 58, 4, 6, 4, 2, 5, 2, 58, 74, 2, 4, 1, 58, 4, 3, 3, 1, 1, 1, 6, 5, 3, 5, 1, 3, 3, 58, 1, 1, 74, 58, 5, 5, 5, 74, 5, 6, 2, 3, 1, 5, 58, 74, 74, 1, 3, 6, 3, 3, 58, 6, 2, 3, 2, 74, 4, 5, 6, 5, 2, 3, 5, 58, 58, 4, 2, 74, 6, 58, 3, 1, 5, 6, 2, 74, 5, 58, 6, 6, 6, 4, 6, 3, 74, 4, 4, 58, 3, 6, 1, 2, 1, 2, 3, 2, 5, 1, 3, 2, 2, 2, 58, 74, 74, 58, 1, 4, 58, 6, 58, 74, 58, 74, 3, 3, 74, 6, 3, 5, 1, 58, 3, 1, 1, 1, 1, 74, 5, 6, 4, 6, 1, 58, 5, 3, 58, 2, 2, 58, 58, 1, 5, 2, 58, 3, 5, 4, 74, 74, 2, 6, 3, 6, 4, 3, 4, 3, 2, 4, 4, 3, 5, 4, 4, 5, 4, 3, 4, 2, 74, 74, 5, 1, 74, 3, 6, 3, 4, 5, 74, 58, 5, 6, 2, 2, 2, 3, 6, 2, 74, 74, 3, 58, 6, 58, 2, 74, 1, 5, 4, 6, 4, 5, 1, 1, 5, 5, 74, 74, 5, 5, 2, 4, 3, 6, 58, 58, 6, 2, 2, 58, 74, 4, 4, 6, 2, 1, 1, 3, 5, 74, 3, 6, 74, 1, 1, 58, 3, 5, 3, 58, 58, 2, 2, 5, 2, 2, 5, 4, 1, 2, 2, 2, 1, 3, 74, 74, 5, 1, 4, 74, 5, 4, 74, 74, 58, 5, 3, 3, 5, 3, 5, 6, 6, 6, 58, 3, 2, 6, 74, 58, 1, 58, 4, 58, 3, 6, 3, 58, 74, 1, 58, 74, 58, 1, 2, 1, 74, 5, 4, 2, 3, 5, 3, 3, 1, 1, 1, 5, 1, 2, 5, 2, 74, 1, 74, 6, 6, 2, 3, 5, 1, 1, 74, 58, 1, 74, 6, 5, 58, 6, 5, 5, 1, 3, 5, 1, 1, 58, 6, 74, 6, 3, 1, 4, 6, 4, 6, 58, 74, 3, 1, 4, 6, 74, 4, 4, 1, 5, 1, 58, 74, 58, 5, 4, 4, 1, 3, 3, 5, 1, 74, 6, 2, 58, 58, 58, 2, 3, 5, 4, 3, 5, 5, 6, 4, 74, 58, 4, 2, 3, 4, 58, 58, 58, 3, 5, 2, 3, 4, 74, 3, 58, 74, 74, 3, 3, 5, 6, 5, 74, 6, 5, 5, 2, 5, 4, 5, 74, 2, 2, 58, 74, 3, 58, 2, 3, 1, 3, 6, 2, 5, 6, 3, 3, 6, 74, 1, 74, 3, 74, 5, 1, 58, 3, 1, 6, 6, 5, 6, 58, 2, 5, 3, 1, 3, 4, 2, 58, 74, 2, 74, 58, 3, 58, 74, 2, 1, 2, 74, 74, 5, 1, 6, 1, 74, 4, 3, 74, 5, 74, 3, 2, 1, 3, 4, 74, 2, 6, 74, 2, 1, 1, 5, 74, 58, 4, 4, 2, 2, 58, 5, 74, 3, 2, 1, 6, 74, 3, 5, 1, 58, 2, 58, 5, 58, 4, 74, 1, 3, 3, 58, 5, 74, 6, 5, 1, 74, 6, 1, 6, 2, 2, 3, 3, 6, 2, 1, 58, 4, 1, 58, 5, 5, 74, 5, 6, 3, 5, 5, 2, 6, 2, 5, 1, 6, 5, 58, 3, 3, 58, 1, 74, 5, 1, 4, 58, 3, 1, 5, 5, 5, 4, 74, 58, 58, 6, 3, 4, 6, 74, 74, 4, 2, 1, 6, 74, 4, 1, 6, 58, 3, 1, 6, 1, 74, 74, 74, 6, 1, 4, 2, 6, 5, 5, 3, 6, 2, 5, 5, 58, 2, 2, 6, 3, 6, 6, 74, 1, 58, 74, 2, 1, 4, 1, 4, 3, 5, 58, 6, 74, 3, 4, 58, 1, 2, 2, 6, 6, 2, 74, 74, 74, 1, 74, 6, 74, 58, 2, 58, 5, 5, 5, 3, 74, 2, 1, 3, 74, 58, 58, 6, 5, 3, 6, 58, 1, 5, 6, 58, 3, 4, 5, 74, 1, 1, 4, 3, 2, 4, 2, 74, 74, 4, 74, 6, 1, 3, 6, 6, 6, 58, 4, 74, 6, 74, 1, 4, 74, 58, 74, 4, 1, 1, 4, 2, 3, 58, 5, 74, 5, 6, 3, 4, 74, 1, 6, 58, 5, 58, 5, 1, 1, 58, 2, 2, 58, 2, 3, 58, 6, 1, 58, 6, 74, 3, 74, 5, 3, 1, 58, 4, 74, 3, 3, 2, 6, 58, 5, 74, 6, 74, 5, 5, 58, 3, 2, 1, 2, 3, 4, 58, 3, 2, 5, 5, 4, 2, 1, 1, 5, 4, 1, 3, 5, 74, 4, 2, 5, 4, 2, 58, 4, 3, 4, 1, 3, 3, 2, 1, 1, 4, 58, 58, 4, 4, 2, 5, 58, 6, 58, 6, 74, 74, 5, 3, 6, 2, 5, 3, 1, 3, 58, 58, 2, 4, 1, 58, 1, 4, 6, 2, 5, 4, 74, 6, 2, 5, 1, 1, 6, 3, 2, 4, 5, 6, 2, 2, 74, 58, 1, 74, 6, 5, 74, 74, 74, 1, 6, 1, 5, 2, 4, 4, 5, 74, 5, 74, 1, 1, 3, 58, 74, 58, 6, 6, 1, 1, 58, 5, 5, 58, 6, 4, 1, 1, 3, 2, 74, 6, 6, 1, 1, 58, 6, 58, 3, 5, 74, 1, 74, 1, 6, 2, 2, 58, 6, 74, 2, 6, 74, 3, 1, 6, 5, 1, 6, 6, 5, 5, 2, 58, 58, 5, 4, 74, 3, 1, 5, 2, 6, 2, 3, 58, 5, 3, 74, 3, 1, 3, 5, 74, 2, 74, 3, 74, 6, 4, 1, 2, 58, 58, 58, 58, 5, 58, 5, 6, 6, 6, 4, 58, 5, 2, 4, 74, 1, 3, 3, 4, 4, 5, 4, 6, 6, 74, 1, 4, 6, 4, 74, 58, 6, 1, 2, 74, 5, 6, 74, 5, 3, 5, 74, 58, 2, 58, 6, 2, 74, 2, 5, 5, 4, 58, 74, 5, 58, 4, 6, 2, 2, 3, 58, 4, 4, 2, 4, 3, 5, 3, 3, 74, 4, 5, 6, 1, 58, 1, 74, 3, 6, 58, 2, 4, 4, 5, 5, 2, 74, 4, 4, 4, 2, 3, 4, 3, 3, 3, 74, 6, 3, 4, 6, 6, 2, 5, 58, 3, 5, 6, 58, 2, 74, 74, 5, 5, 2, 5, 6, 6, 5, 5, 4, 5, 74, 6, 6, 3, 4, 1, 5, 6, 58, 58, 58, 74, 2, 58, 6, 74, 4, 5, 1, 6, 2, 3, 74, 6, 3, 58, 6, 58, 74, 74, 3, 2, 1, 6, 1, 6, 4, 2, 5, 4, 4, 4, 1, 3, 58, 3, 5, 4, 3, 74, 2, 58, 3, 5, 2, 74, 5, 5, 74, 1, 74, 1, 3, 2, 5, 74, 3, 2, 3, 3, 1, 1, 2, 1, 4, 74, 3, 3, 5, 6, 58, 2, 58, 5, 3, 1, 6, 74, 58, 3, 1, 1, 3, 5, 58, 74, 6, 2, 1, 4, 1, 74, 58, 6, 4, 74, 1, 6, 58, 1, 6, 3, 4, 5, 58, 5, 1, 6, 58, 5, 4, 6, 58, 58, 3, 5, 58, 5, 74, 3, 1, 5, 1, 74, 4, 1, 74, 4, 74, 58, 3, 58, 5, 74, 3, 2, 1, 58, 5, 3, 74, 6, 4, 2, 1, 74, 74, 1, 2, 5, 1, 6, 5, 5, 58, 3, 1, 1, 3, 58, 6, 58, 3, 2, 3, 74, 3, 3, 5, 1, 74, 1, 3, 6, 2, 6, 2, 6, 74, 2, 2, 74, 4, 5, 2, 5, 4, 6, 4, 5, 74, 6, 6, 58, 2, 5, 1, 5, 74, 74, 5, 5, 4, 1, 6, 4, 5, 1, 1, 58, 4, 1, 6, 6, 1, 74, 5, 74, 3, 58, 5, 6, 4, 6, 74, 74, 2, 5, 3, 6, 1, 58, 6, 2, 74, 5, 6, 6, 3, 1, 5, 3, 74, 1, 3, 1, 74, 6, 58, 58, 3, 74, 2, 6, 1, 58, 4, 6, 2, 2, 5, 58, 6, 5, 58, 74, 1, 4, 3, 1, 58, 74, 6, 3, 1, 2, 1, 58, 58, 2, 3, 4, 74, 58, 5, 4, 5, 2, 58, 5, 5, 3, 74, 58, 3, 1, 2, 6, 6, 6, 5, 58, 3, 5, 6, 58, 2, 74, 3, 6, 1, 6, 6, 4, 1, 6, 6, 1, 2, 2, 3, 6, 5, 1, 5, 1, 74, 58, 1, 1, 3, 1, 58, 58, 6, 6, 1, 4, 2, 5, 1, 74, 58, 58, 5, 3, 4, 4, 6, 4, 3, 4, 4, 5, 2, 58, 6, 4, 3, 74, 3, 1, 3, 58, 2, 5, 5, 1, 74, 74, 74, 58, 3, 3, 5, 1, 4, 5, 4, 6, 2, 58, 4, 58, 6, 1, 6, 3, 58, 2, 1, 74, 74, 6, 5, 1, 58, 2, 74, 3, 74, 4, 2, 6, 5, 3, 3, 2, 5, 58, 4, 74, 74, 74, 3, 58, 6, 6, 2, 58, 74, 2, 74, 74, 6, 5, 2, 74, 2, 5, 3, 1, 2, 1, 3, 2, 3, 2, 1, 4, 58, 6, 5, 6, 6, 74, 58, 74, 6, 5, 74, 3, 2, 58, 74, 3, 1, 58, 74, 3, 5, 3, 2, 6, 6, 6, 4, 4, 4, 74, 58, 4, 6, 1, 3, 74, 6, 1, 74, 6, 2, 74, 5, 58, 3, 5, 4, 74, 1, 58, 3, 5, 58, 1, 3, 6, 3, 3, 5, 3, 5, 4, 74, 3, 4, 4, 5, 6, 74, 4, 3, 4, 2, 4, 2, 6, 1, 2, 4, 3, 2, 58, 74, 4, 74, 3, 3, 6, 3, 6, 58, 3, 1, 6, 2, 1, 3, 4, 4, 1, 74, 74, 58, 3, 2, 2, 1, 6, 58, 1, 1, 3, 3, 4, 6, 6, 1, 5, 74, 58, 74, 1, 6, 58, 74, 58, 2, 6, 1, 74, 2, 3, 2, 4, 6, 58, 4, 2, 58, 2, 6, 3, 5, 1, 5, 2, 58, 3, 5, 4, 58, 6, 58, 2, 5, 74, 3, 3, 1, 3, 74, 74, 2, 5, 74, 2, 2, 58, 1, 58, 58, 1, 5, 74, 6, 2, 74, 3, 58, 5, 74, 4, 1, 4, 58, 4, 6, 74, 4, 5, 5, 74, 58, 6, 58, 4, 1, 58, 2, 4, 74, 1, 74, 1, 6, 2, 1, 2, 4, 1, 74, 1, 4, 2, 3, 58, 6, 58, 4, 5, 74, 74, 3, 2, 5, 3, 58, 6, 2, 2, 74, 2, 1, 5, 6, 5, 1, 2, 3, 74, 74, 4, 2, 3, 5, 1, 6, 4, 2, 1, 6, 3, 58, 2, 2, 1, 4, 5, 2, 4, 1, 2, 6, 5, 6, 1, 6, 4, 3, 3, 5, 5, 58, 5, 6, 5, 3, 1, 58, 58, 3, 2, 74, 3, 6, 2, 74, 1, 6, 74, 1, 1, 2, 4, 2, 3, 1, 6, 2, 58, 5, 6, 74, 3, 4, 6, 6, 1, 3, 1, 74, 4, 2, 58, 6, 6, 1, 6, 74, 5, 1, 74, 58, 3, 74, 3, 1, 6, 58, 1, 58, 74, 58, 74, 5, 2, 5, 3, 4, 3, 3, 5, 3, 58, 4, 4, 1, 5, 2, 2, 74, 5, 3, 6, 6, 6, 1, 58, 4, 2, 2, 6, 2, 58, 58, 4, 2, 74, 4, 58, 5, 6, 3, 58, 4, 2, 3, 1, 58, 4, 3, 6, 6, 5, 4, 5, 2, 4, 5, 6, 2, 1, 6, 1, 6, 5, 58, 58, 4, 3, 58, 3, 3, 1, 1, 5, 1, 74, 5, 4, 6, 74, 5, 74, 3, 2, 74, 74, 6, 4, 6, 6, 74, 74, 58, 1, 2, 4, 3, 1, 2, 1, 1, 58, 3, 3, 5, 74, 3, 5, 4, 6, 3, 74, 5, 1, 1, 4, 2, 74, 5, 1, 1, 4, 1, 58, 3, 5, 4, 5, 74, 3, 5, 74, 5, 74, 5, 1, 74, 5, 6, 5, 58, 74, 5, 1, 1, 1, 4, 74, 58, 58, 3, 58, 74, 2, 1, 74, 5, 3, 6, 3, 5, 1, 4, 4, 58, 1, 5, 6, 2, 2, 3, 74, 5, 6, 6, 1, 3, 6, 74, 2, 2, 2, 6, 3, 3, 1, 3, 3, 5, 4, 5, 3, 1, 3, 2, 5, 2, 74, 4, 2, 74, 4, 1, 5, 6, 74, 74, 5, 2, 5, 3, 2, 5, 4, 1, 4, 74, 3, 3, 3, 2, 4, 58, 58, 3, 6, 3, 74, 6, 6, 1, 6, 74, 6, 1, 1, 74, 6, 4, 1, 58, 58, 1, 5, 5, 1, 1, 6, 1, 3, 4, 4, 5, 6, 1, 6, 6, 2, 5, 4, 5, 58, 74, 5, 6, 58, 74, 5, 6, 1, 3, 3, 58, 5, 3, 58, 58, 3, 6, 1, 74, 2, 6, 1, 1, 4, 2, 6, 1, 74, 2, 2, 1, 3, 6, 1, 74, 1, 3, 1, 3, 6, 58, 4, 2, 74, 3, 74, 5, 1, 58, 6, 5, 58, 3, 58, 74, 3, 58, 1, 58, 5, 4, 6, 6, 3, 4, 1, 74, 74, 1, 2, 1, 58, 2, 1, 3, 74, 58, 6, 5, 4, 74, 2, 74, 1, 5, 3, 2, 1, 58, 3, 5, 3, 3, 6, 58, 74, 4, 5, 6, 2, 4, 5, 1, 2, 3, 6, 58, 58, 2, 1, 1, 2, 74, 6, 6, 2, 6, 4, 6, 74, 3, 3, 2, 3, 5, 74, 4, 1, 74, 2, 5, 2, 1, 3, 74, 6, 74, 5, 4, 6, 4, 5, 2, 2, 6, 6, 1, 1, 5, 6, 3, 4, 2, 5, 5, 2, 58, 3, 3, 74, 1, 5, 5, 74, 5, 5, 6, 1, 5, 2, 58, 4, 74, 4, 58, 74, 58, 4, 6, 5, 1, 74, 4, 3, 6, 3, 2, 3, 4, 4, 3, 74, 6, 5, 5, 2, 3, 1, 6, 3, 1, 2, 5, 5, 2, 6, 2, 58, 6, 74, 6, 1, 3, 5, 58, 4, 3, 58, 58, 58, 58, 5, 5, 4, 6, 58, 6, 5, 2, 1, 58, 1, 3, 2, 2, 1, 2, 2, 58, 4, 6, 2, 4, 2, 58, 1, 3, 3, 5, 58, 3, 74, 4, 74, 5, 4, 74, 2, 6, 4, 74, 2, 58, 6, 4, 1, 74, 3, 4, 6, 1, 2, 1, 74, 3, 3, 1, 1, 5, 6, 6, 74, 6, 3, 3, 1, 3, 2, 1, 74, 3, 1, 6, 2, 58, 6, 2, 4, 6, 1, 6, 1, 1, 1, 2, 58, 58, 58, 6, 6, 2, 2, 74, 58, 58, 3, 58, 3, 4, 3, 5, 4, 3, 6, 74, 4, 4, 5, 1, 3, 58, 58, 58, 2, 2, 4, 2, 58, 58, 5, 3, 5, 6, 74, 1, 1, 5, 74, 58, 5, 5, 74, 4, 6, 58, 4, 4, 6, 74, 1, 74, 4, 2, 1, 1, 58, 3, 3, 6, 1, 5, 58, 6, 1, 58, 5, 3, 74, 1, 5, 6, 6, 6, 2, 58, 74, 2, 1, 74, 5, 2, 5, 1, 3, 6, 58, 2, 2, 5, 6, 2, 4, 74, 4, 2, 58, 58, 58, 2, 4, 2, 58, 4, 2, 74, 4, 58, 6, 5, 6, 6, 1, 2, 4, 3, 3, 74, 4, 4, 4, 6, 58, 3, 4, 6, 6, 6, 2, 58, 58, 6, 74, 74, 3, 1, 3, 6, 74, 5, 4, 74, 74, 58, 4, 4, 3, 6, 4, 1, 1, 3, 3, 58, 3, 5, 2, 6, 74, 4, 58, 58, 1, 1, 5, 2, 5, 6, 3, 6, 1, 4, 74, 6, 5, 58, 4, 5, 2, 5, 5, 4, 2, 58, 5, 3, 3, 5, 2, 2, 6, 58, 5, 1, 3, 5, 6, 74, 2, 3, 58, 5, 3, 58, 6, 74, 2, 3, 74, 58, 74, 58, 3, 3, 3, 3, 1, 2, 5, 74, 1, 6, 6, 5, 4, 6, 4, 3, 74, 3, 1, 4, 58, 2, 2, 58, 4, 1, 1, 4, 58, 58, 2, 5, 58, 4, 3, 1, 4, 1, 6, 74, 6, 4, 1, 2, 5, 58, 6, 74, 2, 1, 4, 6, 5, 3, 58, 1, 58, 1, 6, 5, 6, 6, 6, 5, 1, 2, 58, 6, 74, 4, 58, 3, 4, 4, 1, 1, 5, 3, 2, 2, 2, 74, 4, 2, 6, 5, 58, 74, 2, 74, 5, 3, 4, 4, 5, 2, 5, 1, 1, 6, 5, 58, 58, 58, 3, 5, 74, 5, 1, 4, 3, 74, 4, 4, 1, 2, 3, 2, 6, 2, 3, 3, 2, 58, 3, 6, 1, 2, 3, 3, 3, 3, 3, 2, 2, 2, 2, 3, 4, 58, 2, 6, 3, 1, 1, 2, 5, 2, 1, 58, 5, 74, 2, 2, 58, 1, 58, 2, 1, 4, 1, 1, 4, 1, 58, 58, 74, 1, 2, 3, 4, 3, 1, 6, 74, 74, 5, 58, 5, 2, 6, 1, 3, 5, 2, 1, 4, 5, 4, 2, 1, 1, 4, 3, 58, 2, 3, 5, 74, 58, 1, 58, 4, 74, 4, 2, 2, 6, 58, 5, 3, 4, 74, 4, 4, 6, 6, 74, 2, 58, 5, 58, 4, 6, 4, 1, 2, 4, 4, 5, 5, 74, 4, 4, 5, 3, 5, 5, 1, 5, 6, 74, 1, 5, 2, 5, 74, 6, 74, 1, 2, 58, 1, 1, 3, 1, 3, 6, 2, 2, 1, 58, 74, 5, 74, 5, 4, 58, 2, 6, 6, 3, 58, 5, 6, 1, 58, 1, 58, 2, 6, 3, 3, 58, 1, 4, 58, 6, 2, 3, 5, 74, 58, 2, 3, 5, 74, 58, 3, 5, 58, 3, 3, 58, 3, 6, 4, 5, 6, 74, 4, 6, 2, 2, 2, 4, 4, 4, 1, 5, 3, 6, 2, 1, 58, 58, 4, 1, 1, 74, 74, 4, 1, 74, 5, 3, 6, 74, 4, 3, 1, 58, 3, 4, 1, 74, 58, 58, 4, 6, 3, 2, 2, 1, 6, 58, 4, 2, 74, 6, 1, 74, 2, 6, 1, 3, 3, 58, 5, 4, 3, 74, 6, 74, 74, 4, 74, 58, 6, 1, 4, 2, 2, 5, 1, 2, 3, 1, 1, 5, 3, 6, 2, 4, 74, 2, 6, 74, 4, 6, 3, 58, 5, 58, 1, 3, 74, 5, 4, 2, 2, 74, 6, 2, 6, 6, 6, 2, 4, 1, 4, 1, 4, 74, 1, 1, 6, 3, 3, 2, 3, 2, 3, 2, 1, 58, 6, 1, 6, 2, 2, 4, 3, 6, 1, 2, 5, 1, 1, 3, 5, 3, 3, 1, 2, 5, 6, 2, 6, 58, 3, 6, 6, 74, 1, 6, 4, 74, 6, 1, 3, 3, 2, 1, 1, 2, 5, 2, 3, 58, 58, 5, 74, 1, 1, 74, 74, 74, 1, 5, 3, 4, 1, 3, 1, 5, 74, 1, 3, 74, 74, 6, 58, 3, 58, 2, 1, 2, 5, 6, 5, 6, 1, 3, 3, 58, 4, 1, 4, 3, 5, 58, 74, 5, 5, 6, 6, 3, 3, 5, 6, 6, 2, 2, 3, 2, 6, 4, 1, 4, 2, 74, 5, 5, 58, 58, 5, 4, 4, 1, 1, 2, 1, 4, 1, 6, 58, 2, 6, 74, 5, 3, 74, 74, 58, 4, 5, 3, 3, 5, 1, 6, 1, 4, 4, 1, 2, 58, 5, 6, 6, 58, 6, 3, 5, 3, 4, 74, 6, 4, 2, 58, 2, 2, 6],
         "height":128,
         "name":"Background Stars",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":32,
         "x":0,
         "y":0
        }, 
        {
         "data":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 209, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0],
         "height":128,
         "name":"Midground Stars",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":32,
         "x":0,
         "y":0
        }, 
        {
         "data":[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 55, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 22, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 38, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 54, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
         "height":128,
         "name":"Foreground Planets",
         "opacity":1,
         "type":"tilelayer",
         "visible":true,
         "width":32,
         "x":0,
         "y":0
        }],
 "nextobjectid":1,
 "orientation":"orthogonal",
 "renderorder":"right-down",
 "tileheight":32,
 "tilesets":[
        {
         "columns":16,
         "firstgid":1,
         "image":".\/assets\/tilesets\/Level_1.png",
         "imageheight":384,
         "imagewidth":512,
         "margin":0,
         "name":"Space",
         "spacing":0,
         "tilecount":192,
         "tileheight":32,
         "tilewidth":32
        }, 
        {
         "columns":16,
         "firstgid":193,
         "image":".\/assets\/tilesets\/Level_1.png",
         "imageheight":384,
         "imagewidth":512,
         "margin":0,
         "name":"Space",
         "spacing":0,
         "tilecount":192,
         "tileheight":32,
         "tilewidth":32
        }],
 "tilewidth":32,
 "version":1,
 "width":32
}
},{}],2:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Game = require('./game');
const Vector = require('./vector');
const Camera = require('./camera');
const Player = require('./player');
const BulletPool = require('./bullet_pool');
const Enemy = require('./enemies');

/* Global variables */
var canvas = document.getElementById('screen');
var game = new Game(canvas, update, render);

var backgrounds = [
	new Image(),
	new Image(),
	new Image(),
	new Image()
];
backgrounds[0].src = 'assets/space/stars.png';
backgrounds[1].src = 'assets/space/big_stars.png';
backgrounds[2].src = 'assets/space/planets.png';
backgrounds[3].src = 'assets/space/asteroids.png';

var input = {
  up: false,
  down: false,
  left: false,
  right: false
}
var firing = false;
var camera = new Camera(canvas, 4096);
var bullets = new BulletPool(50);
var enemyBullets = new BulletPool(100);
var missiles = [];
var enemies = [];
var state = "playing";
var player = new Player(bullets, missiles, {x: camera.x, y: camera.y});
var enemiesLeft = 20;
for(var i = 0; i < 20; i++)
{
	var type = Math.floor(Math.random()*2);
	var x = Math.floor((Math.random()*600)+100);
	var y = Math.floor(Math.random()*(4096-canvas.height));
	if(type == 0) var enemy = new Enemy(enemyBullets, {x: x, y: y}, "sphere");
	else if(type == 1) var enemy = new Enemy(enemyBullets, {x:x, y:y}, "triangle");
	enemies.push(enemy);
}

/**
 * @function onkeydown
 * Handles keydown events
 */
window.onkeydown = function(event) {
  switch(event.key) {
    case "ArrowUp":
    case "w":
      input.up = true;
      event.preventDefault();
      break;
    case "ArrowDown":
    case "s":
      input.down = true;
      event.preventDefault();
      break;
    case "ArrowLeft":
    case "a":
      input.left = true;
      event.preventDefault();
      break;
    case "ArrowRight":
    case "d":
      input.right = true;
      event.preventDefault();
      break;
	case " ":
		firing = true;
		event.preventDefault();
		break;
  }
}

/**
 * @function onkeyup
 * Handles keydown events
 */
window.onkeyup = function(event) {
  switch(event.key) {
    case "ArrowUp":
    case "w":
      input.up = false;
      event.preventDefault();
      break;
    case "ArrowDown":
    case "s":
      input.down = false;
      event.preventDefault();
      break;
    case "ArrowLeft":
    case "a":
      input.left = false;
      event.preventDefault();
      break;
    case "ArrowRight":
    case "d":
      input.right = false;
      event.preventDefault();
      break;
	case " ":
		firing = false;
		event.preventDefault();
	break;
  }
}

/**
 * @function masterLoop
 * Advances the game in sync with the refresh rate of the screen
 * @param {DOMHighResTimeStamp} timestamp the current time
 */
var masterLoop = function(timestamp) {
  game.loop(timestamp);
  window.requestAnimationFrame(masterLoop);
}
masterLoop(performance.now());

/**
 * @function update
 * Updates the game state, moving
 * game objects and handling interactions
 * between them.
 * @param {DOMHighResTimeStamp} elapsedTime indicates
 * the number of milliseconds passed since the last frame.
 */
function update(elapsedTime) {
	if(state == "playing")
	{
	if(player.state == "alive")
	{var dead = 0;
	// update the player
	player.update(elapsedTime, input, firing, camera.y);

	// update the camera
	camera.update(player.position);

	// Update bullets
	bullets.update(elapsedTime, function(bullet){
		if(!camera.onScreen(bullet)) return true;
		return false;
	});
	enemyBullets.update(elapsedTime, function(bullet)
	{
		if(!camera.onScreen(bullet)) return true;
		return false;
	});
	
	// Update missiles
	var markedForRemoval = [];
	missiles.forEach(function(missile, i){
	missile.update(elapsedTime);
	if(Math.abs(missile.position.x - camera.x) > camera.width * 2)
		markedForRemoval.unshift(i);
	});
  	//Update the enemies
	enemies.forEach(function(enemy, i){
		enemy.update(elapsedTime, camera.y, player.position);
		if(enemy.state == "dead") dead++;
		if(dead == 20) state = "won";
	});
  // Remove missiles that have gone off-screen
	markedForRemoval.forEach(function(index){
		missiles.splice(index, 1);
	});
	
	var potentialEnemyHits = [];
	//Check for collision of player bullets and player against enemies

		enemies.forEach(function (enemy) {
			if(camera.onScreen(enemy.position))
			{	
				for(var i = 0; i < bullets.end; i++)
				{
					var br = bullets.pool[6*i+5];
					var by = bullets.pool[6*i+1];
					if(Math.abs(by - enemy.position.y) < enemy.height)
					{
						if(enemy.state == "alive") potentialEnemyHits.push({enemy: enemy, bulletIndex: i});
					}			
				}

				if(Math.abs(enemy.position.y-player.position.y) < enemy.height)
				{
					if(enemy.state == "alive") potentialEnemyHits.push({enemy: enemy, bulletIndex: -1});
				}
			}
		});
	
	var potentialPlayerHits = [];
	//Check for collision of enemy bullets with the player
	for(var i = 0; i < enemyBullets.end; i++)
	{
		var br = enemyBullets.pool[6*i+5];
		var by = enemyBullets.pool[6*i+1];

		if(Math.abs(by - player.position.y) < player.height)
		{
			if(player.state == "alive") potentialPlayerHits.push({player: player, bulletIndex: i});
		}				
	}
	
	potentialEnemyHits.forEach(function(hit)
	{		

		if(hit.bulletIndex != -1)
		{		
			var bx = bullets.pool[6*hit.bulletIndex];
			var by = bullets.pool[6*hit.bulletIndex+1];
			var br = bullets.pool[6*hit.bulletIndex+5];

			if(!(bx+br*2 < hit.enemy.position.x || bx > hit.enemy.position.x + hit.enemy.width
				|| by+br*2 < hit.enemy.position.y || by > hit.enemy.position.y + hit.enemy.height))
			{
				bullets.remove(hit.bulletIndex);
				hit.enemy.damage();
			}
		}
		else
		{
			if(!(player.position.x + player.width < hit.enemy.position.x
				|| player.position.x > hit.enemy.position.x + hit.enemy.width
				|| player.position.y+player.height < hit.enemy.position.y
				|| player.position.y > hit.enemy.position.y + hit.enemy.height))
			{
				player.damage();
			}
		}
	});
	
	potentialPlayerHits.forEach(function(hit)
	{
		var bx = enemyBullets.pool[6*hit.bulletIndex];
		var by = enemyBullets.pool[6*hit.bulletIndex+1];
		var br = enemyBullets.pool[6*hit.bulletIndex+5];
		if(!(bx+br*2 < hit.player.position.x || bx > hit.player.position.x + hit.player.width
				|| by+br*2 < hit.player.position.y || by > hit.player.position.y + hit.player.height))
		{
			enemyBullets.remove(hit.bulletIndex);
			player.damage();
		}
	});
	}
	}
}

/**
  * @function render
  * Renders the current game state into a back buffer.
  * @param {DOMHighResTimeStamp} elapsedTime indicates
  * the number of milliseconds passed since the last frame.
  * @param {CanvasRenderingContext2D} ctx the context to render to
  */
function render(elapsedTime, ctx) {
  ctx.fillStyle = "black";
  ctx.fillRect(0, 0, 1024, 786);

	//Render the background
	//Stars
	ctx.save();
	ctx.translate(0, -camera.y * 0.2);
	ctx.drawImage(backgrounds[0], 0, 0);
	ctx.restore();

	//Big stars
	ctx.save();
	ctx.translate(0, -camera.y * 0.4);
	ctx.drawImage(backgrounds[1], 0, 0);
	ctx.restore();

	//Planets
	ctx.save();
	ctx.translate(0, -camera.y*0.6);
	ctx.drawImage(backgrounds[2], 0, 0);
	ctx.restore();
	
	//Asteroids
	ctx.save();
	ctx.translate(0, -camera.y);
	ctx.drawImage(backgrounds[3], 0, 0);
	ctx.restore();
  // Transform the coordinate system using
  // the camera position BEFORE rendering
  // objects in the world - that way they
  // can be rendered in WORLD coordinates
  // but appear in SCREEN coordinates
  ctx.save();
  ctx.translate(-camera.x, -camera.y);
  renderWorld(elapsedTime, ctx);
  ctx.restore();

  // Render the GUI without transforming the
  // coordinate system
  renderGUI(elapsedTime, ctx);
}

/**
  * @function renderWorld
  * Renders the entities in the game world
  * IN WORLD COORDINATES
  * @param {DOMHighResTimeStamp} elapsedTime
  * @param {CanvasRenderingContext2D} ctx the context to render to
  */
function renderWorld(elapsedTime, ctx) {
	//Render enemies
	enemies.forEach(function(enemy, i){
		enemy.render(elapsedTime, ctx);
	});
	
	// Render the bullets
    bullets.render(elapsedTime, ctx);
	enemyBullets.render(elapsedTime, ctx);
    // Render the missiles
    missiles.forEach(function(missile) {
      missile.render(elapsedTime, ctx);
    });
	// Render the player
    player.render(elapsedTime, ctx, input);

}

/**
  * @function renderGUI
  * Renders the game's GUI IN SCREEN COORDINATES
  * @param {DOMHighResTimeStamp} elapsedTime
  * @param {CanvasRenderingContext2D} ctx
  */
function renderGUI(elapsedTime, ctx) {
  // TODO: Render the GUI
  
  //Health bar  
  ctx.fillStyle = "red";
  ctx.fillRect(10, 10, 250, 50);
  ctx.strokeStyle = "dimgrey";
  ctx.lineWidth = 4;
  ctx.fillStyle = "lightgreen";
  ctx.fillRect(10, 10, 50*player.life, 50);

  ctx.strokeRect(10, 10, 250, 50);
  
  if(state == "won")
  {
	ctx.fillStyle = 'rgba(255, 255, 255, 0.75)';
	ctx.fillRect(0, canvas.height/4, canvas.width, 320);
	ctx.fillStyle = 'black';
	ctx.font = "40px Arial"; 
	ctx.fillText("You beat the level!", canvas.width/3 + 5, canvas.height/3 + 60);
	ctx.fillText("Level Score: 4550", canvas.width/5 + 150, canvas.height/3+140);
  }
}

},{"./bullet_pool":3,"./camera":4,"./enemies":5,"./game":6,"./player":9,"./vector":11}],3:[function(require,module,exports){
"use strict";

/**
 * @module BulletPool
 * A class for managing bullets in-game
 * We use a Float32Array to hold our bullet info,
 * as this creates a single memory buffer we can
 * iterate over, minimizing cache misses.
 * Values stored are: positionX, positionY, velocityX,
 * velocityY in that order.
 */
module.exports = exports = BulletPool;

/**
 * @constructor BulletPool
 * Creates a BulletPool of the specified size
 * @param {uint} size the maximum number of bullets to exits concurrently
 */
function BulletPool(maxSize) {
	this.pool = new Array(6 * maxSize);
	this.end = 0;
	this.max = maxSize;
	this.img = new Image();
	this.img.src = 'assets/sprites/ship_sprites.png';
}

/**
 * @function add
 * Adds a new bullet to the end of the BulletPool.
 * If there is no room left, no bullet is created.
 * @param {Vector} position where the bullet begins
 * @param {Vector} velocity the bullet's velocity
*/
BulletPool.prototype.add = function(position, velocity, frame, radius) {
  if(this.end < this.max) {
    this.pool[6*this.end] = position.x;
    this.pool[6*this.end+1] = position.y-12;
    this.pool[6*this.end+2] = velocity.x;
    this.pool[6*this.end+3] = velocity.y;
	this.pool[6*this.end+4] = frame;
	this.pool[6*this.end+5] = radius;
    this.end++;
  }
}

/**
 * @function update
 * Updates the bullet using its stored velocity, and
 * calls the callback function passing the transformed
 * bullet.  If the callback returns true, the bullet is
 * removed from the pool.
 * Removed bullets are replaced with the last bullet's values
 * and the size of the bullet array is reduced, keeping
 * all live bullets at the front of the array.
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {function} callback called with the bullet's position,
 * if the return value is true, the bullet is removed from the pool
 */
BulletPool.prototype.update = function(elapsedTime, callback) {
  for(var i = 0; i < this.end; i++){
    // Move the bullet
    this.pool[6*i] += this.pool[6*i+2];
    this.pool[6*i+1] += this.pool[6*i+3];
    // If a callback was supplied, call it
    if(callback && callback({
      x: this.pool[6*i],
      y: this.pool[6*i+1]
    })) {
      // Swap the current and last bullet if we
      // need to remove the current bullet
      this.remove(i);
      // Reduce our iterator by 1 so that we update the
      // freshly swapped bullet.
      i--;
    }
  }
}

//Remove a bullet from the bullet pool
BulletPool.prototype.remove = function(i) {
	this.pool[6*i] = this.pool[6*(this.end-1)];
	this.pool[6*i+1] = this.pool[6*(this.end-1)+1];
	this.pool[6*i+2] = this.pool[6*(this.end-1)+2];
	this.pool[6*i+3] = this.pool[6*(this.end-1)+3];
	this.pool[6*i+4] = this.pool[6*(this.end-1)+4];
	this.pool[6*i+5] = this.pool[6*(this.end-1)+5];
	// Reduce the total number of bullets by 1
	this.end--;
}

/**
 * @function render
 * Renders all bullets in our array.
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
BulletPool.prototype.render = function(elapsedTime, ctx) {
  // Render the bullets as a single path
  ctx.save();
  for(var i = 0; i < this.end; i++) {
	
    var frame = this.pool[6*i+4];
    ctx.moveTo(this.pool[6*i], this.pool[6*i+1]);
	ctx.drawImage(
		this.img, 
		frame.x, frame.y, 
		frame.width, frame.height, 
		this.pool[6*i], this.pool[6*i+1], 
		frame.width, frame.height);
  }
  ctx.restore();
}

},{}],4:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');

/**
 * @module Camera
 * A class representing a simple camera
 */
module.exports = exports = Camera;

/**
 * @constructor Camera
 * Creates a camera
 * @param {Rect} screen the bounds of the screen
 */
function Camera(screen, level) {
  this.x = 0;
  this.y = level-screen.height;
  this.width = screen.width;
  this.height = screen.height;
}

/**
 * @function update
 * Updates the camera based on the supplied target
 * @param {Vector} target what the camera is looking at
 */
Camera.prototype.update = function(target) {
  // TODO: Align camera with player
  if(this.y>0) this.y--;
}

/**
 * @function onscreen
 * Determines if an object is within the camera's gaze
 * @param {Vector} target a point in the world
 * @return true if target is on-screen, false if not
 */
Camera.prototype.onScreen = function(target) {
  return (
     target.x > this.x -32 &&
     target.x < this.x + this.width &&
     target.y > this.y -32 &&
     target.y < this.y + this.height
   );
}

/**
 * @function toScreenCoordinates
 * Translates world coordinates into screen coordinates
 * @param {Vector} worldCoordinates
 * @return the tranformed coordinates
 */
Camera.prototype.toScreenCoordinates = function(worldCoordinates) {
  return Vector.subtract(worldCoordinates, this);
}

/**
 * @function toWorldCoordinates
 * Translates screen coordinates into world coordinates
 * @param {Vector} screenCoordinates
 * @return the tranformed coordinates
 */
Camera.prototype.toWorldCoordinates = function(screenCoordinates) {
  return Vector.add(screenCoordinates, this);
}

},{"./vector":11}],5:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const Missile = require('./missile');
const Particles = require('./particles');

/* Constants */ 
const BULLET_SPEED = 10;
const SCROLL_SPEED = 1;
/**
 * @module Enemy
 * A class representing enemies
 */
module.exports = exports = Enemy;

/**
 * @constructor Enemy
 * Creates a Enemy
 * @param {BulletPool} bullets the bullet pool
 */
function Enemy(bullets, position, type) {
  this.bullets = bullets;
  this.angle = 0;
  this.position = {x: position.x, y: position.y};
  this.velocity = {x: 0, y: 0};
  this.img = new Image();
  this.img.src = 'assets/sprites/ship_sprites.png';
  this.frame = 0;
  this.timer = 0;
  this.name = type;
  this.particles = new Particles(20);
  this.particleCount = 0;
  this.state = "alive";
  if(type == "sphere") 
  {
	this.width = 100;
	this.height = 100;
	this.size = 128;
	this.radius = 25;
	this.life = 10;
	this.bulletFrame = {x: 0, y: 512, width: 64, height: 64};
	this.shotPosition = {x: this.position.x + 32, y: this.position.y + 40};
	this.shotRadius = 9;
	this.attackDelay = 500;
	this.attackTimer = this.attackDelay;
  }
  else if(type == "triangle")
  {
	this.width = 40;
	this.height = 40;
	this.radius = 25;
	this.life = 5;
	this.size = 64;
	this.bulletFrame = {x: 0, y: 192, width: 64, height: 64};
	this.shotPosition = {x: this.position.x + 32, y: this.position.y + 40};
	this.shotRadius = 9;
	this.speed = 5;
	this.direction = "left";
	this.attackDelay = 1000;
	this.attackTimer = this.attackDelay;
  }
}

/**
 * @function update
 * Updates the Enemy based on the supplied input
 * @param {DOMHighResTimeStamp} elapedTime
 * @param {Input} input object defining input, must have
 * boolean properties: up, left, right, down
 */
Enemy.prototype.update = function(elapsedTime, cameraY, player) {
	if(this.state == "dying")
	{
		if(this.particleCount < 20)
		{
			var randX = Math.floor((Math.random() * this.size));
			var randY = Math.floor((Math.random() * this.size));
			this.particles.emit({x: this.position.x + randX, y: this.position.y + randY});
			this.particleCount++;
		}
		else this.state = "dead";
		this.particles.update(elapsedTime);
	}
	else if(this.state != "dead")
	{
		this.attackTimer+=elapsedTime;
		if(this.attackTimer >= this.attackDelay)
		{
			if(this.name == "sphere")
			{
				this.timer+=elapsedTime;
				if(this.timer >= 50)
				{
					this.timer = 0;

					if(this.frame < 4) this.frame++;
					else
					{
						this.attackTimer = 0;
						this.fireBullet(player);
					}
				}
			}
			else if(this.name == "triangle")
			{
				this.fireBullet({x:0, y:this.shotPosition.y + 10000});
				this.attackTimer = 0;
			}
		}
		
		if(this.name == "triangle")
		{
			this.timer+=elapsedTime;
			if(this.position.x < 0) this.direction = "right"; 
			else if(this.position.x > 765) this.direction = "left"; 
			if(this.direction == "right") this.position.x +=1;
			else if(this.direction == "left")this.position.x-=1;
			this.shotPosition.x = this.position.x;
			if(this.timer >= 50)
			{
				this.timer = 0;

				if(this.frame < 1) this.frame++;
				else this.frame = 0;
			}
		}
	}
  this.y+=SCROLL_SPEED;
}

/**
 * @function render
 * Renders the Enemy in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Enemy.prototype.render = function(elapsedTime, ctx) {
	if(this.life>0)
	{
		if(this.name == "sphere") ctx.drawImage(this.img, 128*this.frame, 384, 128, 128, this.position.x, this.position.y, 128, 128);
		else if(this.name == "triangle") ctx.drawImage(this.img, 64*this.frame, 128, 64, 64, this.position.x, this.position.y, 64, 64);
	}
	this.particles.render(elapsedTime, ctx, {r:142, g: 142, b: 142});
}

/**
 * @function fireBullet
 * Fires a bullet
 * @param {Vector} direction
 */
Enemy.prototype.fireBullet = function(player) {
	this.frame = 0;
    var direction = Vector.subtract(
		player, 
		this.shotPosition
    );
	var velocity = Vector.scale(Vector.normalize(direction), BULLET_SPEED);
	this.bullets.add(this.shotPosition, velocity, this.bulletFrame, this.shotRadius);
}

Enemy.prototype.damage = function()
{
	this.life--;
	if(this.life <= 0)
	{
		this.state = "dying";
	}
}

/**
 * @function fireMissile
 * Fires a missile, if the Enemy still has missiles
 * to fire.
 */
Enemy.prototype.fireMissile = function() {
  if(this.missileCount > 0){
    var position = Vector.add(this.position, {x:0, y:30})
    var missile = new Missile(position);
    this.missiles.push(missile);
    this.missileCount--;
  }
}

},{"./missile":7,"./particles":8,"./vector":11}],6:[function(require,module,exports){
"use strict";

/**
 * @module exports the Game class
 */
module.exports = exports = Game;

/**
 * @constructor Game
 * Creates a new game object
 * @param {canvasDOMElement} screen canvas object to draw into
 * @param {function} updateFunction function to update the game
 * @param {function} renderFunction function to render the game
 */
function Game(screen, updateFunction, renderFunction) {
  this.update = updateFunction;
  this.render = renderFunction;

  // Set up buffers
  this.frontBuffer = screen;
  this.frontCtx = screen.getContext('2d');
  this.backBuffer = document.createElement('canvas');
  this.backBuffer.width = screen.width;
  this.backBuffer.height = screen.height;
  this.backCtx = this.backBuffer.getContext('2d');

  // Start the game loop
  this.oldTime = performance.now();
  this.paused = false;
  

}
var tilemap = require('./tilemap.js');
Game.prototype.loadLevel = function(level)
{
	var tilemapData = require('../assets/tilemaps/space_level.json');

	// Load the tilemap
	this.tilemap.load(tilemapData, {
		onload: function() {
		  tilemap.render(this.frontCtx);
		}
	});
}
/**
 * @function pause
 * Pause or unpause the game
 * @param {bool} pause true to pause, false to start
 */
Game.prototype.pause = function(flag) {
  this.paused = (flag == true);
}

/**
 * @function loop
 * The main game loop.
 * @param{time} the current time as a DOMHighResTimeStamp
 */
Game.prototype.loop = function(newTime) {
  var game = this;
  var elapsedTime = newTime - this.oldTime;
  this.oldTime = newTime;

  if(!this.paused) this.update(elapsedTime);
  this.render(elapsedTime, this.frontCtx);

  // Flip the back buffer
  this.frontCtx.drawImage(this.backBuffer, 0, 0);
}

},{"../assets/tilemaps/space_level.json":1,"./tilemap.js":10}],7:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const Particles = require('./particles');

/* Constants */
const MISSILE_SPEED = 8;

/**
 * @module Missile
 * A class representing a player's missile
 */
module.exports = exports = Missile;

/**
 * @constructor Missile
 * Creates a missile
 * @param {Vector} position the position of the missile
 * @param {Object} target the target of the missile
 */
function Missile(position, target) {
  this.position = {x: position.x, y:position.y}
  this.target = target;
  this.angle = 0;
  this.img = new Image()
  this.img.src = 'assets/helicopter.png';
  this.smokeParticles = new Particles(400);
}

/**
 * @function update
 * Updates the missile, steering it towards a locked
 * target or straight ahead
 * @param {DOMHighResTimeStamp} elapedTime
 */
Missile.prototype.update = function(elapsedTime) {

  // set the velocity
  var velocity = {x: MISSILE_SPEED, y: 0}
  if(this.target) {
    var direction = Vector.subtract(this.position, this.target);
    velocity = Vector.scale(Vector.normalize(direction), MISSILE_SPEED);
  }

  // determine missile angle
  this.angle = Math.atan2(velocity.y, velocity.x);

  // move the missile
  this.position.x += velocity.x;
  this.position.y += velocity.y;

  // emit smoke
  this.smokeParticles.emit(this.position);

  // update smoke
  this.smokeParticles.update(elapsedTime);
}

/**
 * @function render
 * Renders the missile in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Missile.prototype.render = function(elapsedTime, ctx) {
  // Draw Missile
  ctx.save();
  ctx.translate(this.position.x, this.position.y);
  ctx.rotate(this.angle);
  ctx.drawImage(this.img, 76, 56, 16, 8, 0, -4, 16, 8);
  ctx.restore();
  // Draw Smoke
  this.smokeParticles.render(elapsedTime, ctx);
}
},{"./particles":8,"./vector":11}],8:[function(require,module,exports){
"use strict";

/**
 * @module Particles
 * A class for managing a particle engine that
 * emulates a smoke trail
 */
module.exports = exports = Particles;

/**
 * @constructor Particles
 * Creates a Particles engine of the specified size
 * @param {uint} size the maximum number of particles to exist concurrently
 */
function Particles(maxSize) {
  this.pool = new Float32Array(3 * maxSize);
  this.start = 0;
  this.end = 0;
  this.wrapped = false;
  this.max = maxSize;
}

/**
 * @function emit
 * Adds a new particle at the given position
 * @param {Vector} position
*/
Particles.prototype.emit = function(position) {
  if(this.end != this.max) {
    this.pool[3*this.end] = position.x;
    this.pool[3*this.end+1] = position.y;
    this.pool[3*this.end+2] = 0.0;
    this.end++;
  } else {
    this.pool[3] = position.x;
    this.pool[4] = position.y;
    this.pool[5] = 0.0;
    this.end = 1;
  }
}

/**
 * @function update
 * Updates the particles
 * @param {DOMHighResTimeStamp} elapsedTime
 */
Particles.prototype.update = function(elapsedTime) {
  function updateParticle(i) {
    this.pool[3*i+2] += elapsedTime;
    if(this.pool[3*i+2] > 2000) this.start = i;
  }
  var i;
  if(this.wrapped) {
    for(i = 0; i < this.end; i++){
      updateParticle.call(this, i);
    }
    for(i = this.start; i < this.max; i++){
      updateParticle.call(this, i);
    }
  } else {
    for(i = this.start; i < this.end; i++) {
      updateParticle.call(this, i);
    }
  }
}

/**
 * @function render
 * Renders all bullets in our array.
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Particles.prototype.render = function(elapsedTime, ctx, color) {
  function renderParticle(i){
    var alpha = 1 - (this.pool[3*i+2] / 1000);
    var radius = 0.1 * this.pool[3*i+2];
    if(radius > 5) radius = 5;
    ctx.beginPath();
    ctx.arc(
      this.pool[3*i],   // X position
      this.pool[3*i+1], // y position
      radius, // radius
      0,
      2*Math.PI
    );
	
    ctx.fillStyle = 'rgba('+ color.r +',' + color.g +', ' + color.b + ',' + alpha + ')';
    ctx.fill();
  }

  // Render the particles individually
  var i;
  if(this.wrapped) {
    for(i = 0; i < this.end; i++){
      renderParticle.call(this, i);
    }
    for(i = this.start; i < this.max; i++){
      renderParticle.call(this, i);
    }
  } else {
    for(i = this.start; i < this.end; i++) {
      renderParticle.call(this, i);
    }
  }
}

},{}],9:[function(require,module,exports){
"use strict";

/* Classes and Libraries */
const Vector = require('./vector');
const Missile = require('./missile');
const Particles = require('./particles');

/* Constants */ 
const PLAYER_SPEED = 7;
const BULLET_SPEED = 10;
const SCROLL_SPEED = 1;
/**
 * @module Player
 * A class representing a player's ship
 */
module.exports = exports = Player;

/**
 * @constructor Player
 * Creates a player
 * @param {BulletPool} bullets the bullet pool
 */
function Player(bullets, missiles, position) {
  this.missiles = missiles;
  this.missileCount = 4;
  this.bullets = bullets;
  this.angle = 0;
  this.position = {x: 480, y: position.y+700};
  this.velocity = {x: 0, y: 0};
  this.img = new Image()
  this.img.src = 'assets/sprites/ship_sprites.png';
  this.frame = 0;
  this.timer = 0;
  this.bulletDelay = 100;
  this.bulletTimer = this.bulletDelay;
  this.height = 40;
  this.width = 40;
  this.life = 5;
  this.particles = new Particles(20);
  this.particleCount = 0;
 
  this.state = "alive";
}

/**
 * @function update
 * Updates the player based on the supplied input
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {Input} input object defining input, must have
 * boolean properties: up, left, right, down
 */
Player.prototype.update = function(elapsedTime, input, firing, cameraY) {
	if(this.state == "dying")
	{
		if(this.particleCount < 20)
		{
			var randX = Math.floor((Math.random() * 64));
			var randY = Math.floor((Math.random() * 64));
			this.particles.emit({x: this.position.x + randX, y: this.position.y + randY});
			this.particleCount++;
		}
		else this.state = "dead";
		this.particles.update(elapsedTime);
	}
	else if(!(this.state == "dead"))
	{
		this.timer+=elapsedTime;
		this.bulletTimer+=elapsedTime;
		if(this.timer >= 50)
		{
			this.timer = 0;
			if(this.frame == 1) this.frame = 0;
			else this.frame = 1;
		}

		if(firing && this.bulletTimer >= this.bulletDelay)
		{
			this.bulletTimer = 0;
			this.fireBullet({x: 0, y: -1});
		}
		// set the velocity
		this.velocity.x = 0;
		if(input.left) this.velocity.x -= PLAYER_SPEED;
		if(input.right) this.velocity.x += PLAYER_SPEED;
		this.velocity.y = 0;
		if(input.up) this.velocity.y -= PLAYER_SPEED / 2 + SCROLL_SPEED;
		else if(input.down) this.velocity.y += PLAYER_SPEED / 2;

		// determine player angle
		this.angle = 0;
		if(this.velocity.x < 0) this.angle = -1;
		if(this.velocity.x > 0) this.angle = 1;

		// move the player
		this.position.x += this.velocity.x;
		this.position.y += this.velocity.y;

		// don't let the player move off-screen
		if(this.position.x < 0) this.position.x = 0;
		else if(this.position.x > 964) this.position.x = 964;
		else if(this.position.y > cameraY+746) this.position.y = cameraY+746;
		else if(this.position.y < cameraY) this.position.y = cameraY;
		
	}
	if(cameraY > 0) this.position.y -= SCROLL_SPEED;
}

Player.prototype.damage = function()
{
	this.life--;
	if(this.life <= 0)
	{
		this.state = "dying";
	}
}

/**
 * @function render
 * Renders the player helicopter in world coordinates
 * @param {DOMHighResTimeStamp} elapsedTime
 * @param {CanvasRenderingContext2D} ctx
 */
Player.prototype.render = function(elapsedTime, ctx, input) {
  var offset = 0;
  if(input.left) offset = 2;
  else if(input.right) offset = 4;
  if(this.life > 0) ctx.drawImage(this.img, 64*(offset + this.frame), 0, 64, 64, this.position.x, this.position.y, 64, 64);
  this.particles.render(elapsedTime, ctx, {r:127, g: 63, b: 191});
}

/**
 * @function fireBullet
 * Fires a bullet
 * @param {Vector} direction
 */
Player.prototype.fireBullet = function(direction) {
	var velocity = Vector.scale(Vector.normalize(direction), BULLET_SPEED);
	var frame = {x: 0, y: 64, width: 64, height: 64};
	this.bullets.add({x: this.position.x-20, y: this.position.y - 16}, velocity, frame, 6);
	this.bullets.add({x: this.position.x+20, y: this.position.y - 16}, velocity, frame, 6);
}

/**
 * @function fireMissile
 * Fires a missile, if the player still has missiles
 * to fire.
 */
Player.prototype.fireMissile = function() {
  if(this.missileCount > 0){
    var position = Vector.add(this.position, {x:0, y:30})
    var missile = new Missile(position);
    this.missiles.push(missile);
    this.missileCount--;
  }
}

},{"./missile":7,"./particles":8,"./vector":11}],10:[function(require,module,exports){
// Tilemap engine defined using the Module pattern
module.exports = (function (){
  var tiles = [],
      tilesets = [],
      layers = [],
      tileWidth = 0,
      tileHeight = 0,
      mapWidth = 0,
      mapHeight = 0;
      
  var load = function(mapData, options) {
      
    var loading = 0;

    // Release old tiles & tilesets
    tiles = [];
    tilesets = [];
    
    // Resize the map
    tileWidth = mapData.tilewidth;
    tileHeight = mapData.tileheight;
    mapWidth = mapData.width;
    mapHeight = mapData.height;

    // Load the tileset(s)
    mapData.tilesets.forEach( function(tilesetmapData, index) {

      // Load the tileset image
      var tileset = new Image();
      loading++;
      tileset.onload = function() {
        loading--;
        if(loading == 0 && options.onload) options.onload();
      }
      tileset.src = tilesetmapData.image;
      tilesets.push(tileset);
      
      // Create the tileset's tiles
      var colCount = Math.floor(tilesetmapData.imagewidth / tileWidth),
          rowCount = Math.floor(tilesetmapData.imageheight / tileHeight),
          tileCount = colCount * rowCount;
      
      for(i = 0; i < tileCount; i++) {
        var tile = {
          // Reference to the image, shared amongst all tiles in the tileset
          image: tileset,
          // Source x position.  i % colCount == col number (as we remove full rows)
          sx: (i % colCount) * tileWidth,
          // Source y position. i / colWidth (integer division) == row number 
          sy: Math.floor(i / rowCount) * tileHeight,
        }
        tiles.push(tile);
      }
    });
    
    // Parse the layers in the map
    mapData.layers.forEach( function(layerData) {
      
      // Tile layers need to be stored in the engine for later
      // rendering
      if(layerData.type == "tilelayer") {
        // Create a layer object to represent this tile layer
        var layer = {
          name: layerData.name,
          width: layerData.width,
          height: layerData.height,
          visible: layerData.visible
        }
      
        // Set up the layer's data array.  We'll try to optimize
        // by keeping the index data type as small as possible
        if(tiles.length < Math.pow(2,8))
          layer.data = new Uint8Array(layerData.data);
        else if (tiles.length < Math.pow(2, 16))
          layer.data = new Uint16Array(layerData.data);
        else 
          layer.data = new Uint32Array(layerData.data);
      
        // save the tile layer
        layers.push(layer);
      }
    });
  }

  var render = function(screenCtx) {
    // Render tilemap layers - note this assumes
    // layers are sorted back-to-front so foreground
    // layers obscure background ones.
    // see http://en.wikipedia.org/wiki/Painter%27s_algorithm
    layers.forEach(function(layer){
      // Only draw layers that are currently visible
      if(layer.visible) { 
        for(y = 0; y < layer.height; y++) {
          for(x = 0; x < layer.width; x++) {
            var tileId = layer.data[x + layer.width * y];
            
            // tiles with an id of 0 don't exist
            if(tileId != 0) {
              var tile = tiles[tileId - 1];
              if(tile.image) { // Make sure the image has loaded
                screenCtx.drawImage(
                  tile.image,     // The image to draw 
                  tile.sx, tile.sy, tileWidth, tileHeight, // The portion of image to draw
                  x*tileWidth, y*tileHeight, tileWidth, tileHeight // Where to draw the image on-screen
                );
              }
            }        
          }
        }
      }
      
    });
  }
  
  var tileAt = function(x, y, layer) {
    // sanity check
    if(layer < 0 || x < 0 || y < 0 || layer >= layers.length || x > mapWidth || y > mapHeight) 
      return undefined;  
    return tiles[layers[layer].data[x + y*mapWidth] - 1];
  }
  
  // Expose the module's public API
  return {
    load: load,
    render: render,
    tileAt: tileAt
  }
  
  
})();
},{}],11:[function(require,module,exports){
"use strict";

/**
 * @module Vector
 * A library of vector functions.
 */
module.exports = exports = {
  add: add,
  subtract: subtract,
  scale: scale,
  rotate: rotate,
  dotProduct: dotProduct,
  magnitude: magnitude,
  normalize: normalize
}


/**
 * @function rotate
 * Scales a vector
 * @param {Vector} a - the vector to scale
 * @param {float} scale - the scalar to multiply the vector by
 * @returns a new vector representing the scaled original
 */
function scale(a, scale) {
 return {x: a.x * scale, y: a.y * scale};
}

/**
 * @function add
 * Computes the sum of two vectors
 * @param {Vector} a the first vector
 * @param {Vector} b the second vector
 * @return the computed sum
*/
function add(a, b) {
 return {x: a.x + b.x, y: a.y + b.y};
}

/**
 * @function subtract
 * Computes the difference of two vectors
 * @param {Vector} a the first vector
 * @param {Vector} b the second vector
 * @return the computed difference
 */
function subtract(a, b) {
  return {x: a.x - b.x, y: a.y - b.y};
}

/**
 * @function rotate
 * Rotates a vector about the Z-axis
 * @param {Vector} a - the vector to rotate
 * @param {float} angle - the angle to roatate by (in radians)
 * @returns a new vector representing the rotated original
 */
function rotate(a, angle) {
  return {
    x: a.x * Math.cos(angle) - a.y * Math.sin(angle),
    y: a.x * Math.sin(angle) + a.y * Math.cos(angle)
  }
}

/**
 * @function dotProduct
 * Computes the dot product of two vectors
 * @param {Vector} a the first vector
 * @param {Vector} b the second vector
 * @return the computed dot product
 */
function dotProduct(a, b) {
  return a.x * b.x + a.y * b.y
}

/**
 * @function magnitude
 * Computes the magnitude of a vector
 * @param {Vector} a the vector
 * @returns the calculated magnitude
 */
function magnitude(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y);
}

/**
 * @function normalize
 * Normalizes the vector
 * @param {Vector} a the vector to normalize
 * @returns a new vector that is the normalized original
 */
function normalize(a) {
  var mag = magnitude(a);
  return {x: a.x / mag, y: a.y / mag};
}

},{}]},{},[2]);
